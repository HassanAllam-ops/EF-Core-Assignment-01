// <auto-generated />
using System;
using EF_Core_Assignment_01.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core_Assignment_01.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    [Migration("20250821235822_AddRelationships")]
    partial class AddRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseInstructorCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseInstructorInstractorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopId")
                        .HasColumnType("int");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.HasIndex("CourseInstructorCourseId", "CourseInstructorInstractorId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstractorId")
                        .HasColumnType("int");

                    b.Property<int>("Evaluate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("CourseId", "InstractorId");

                    b.ToTable("CourseInstructors");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("ManageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManageId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CourseInstructorCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseInstructorInstractorId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CourseInstructorCourseId", "CourseInstructorInstractorId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TakesId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("StudentStudentCourse", b =>
                {
                    b.Property<int>("HaveId")
                        .HasColumnType("int");

                    b.Property<int>("TakesStudentId")
                        .HasColumnType("int");

                    b.Property<int>("TakesCourseId")
                        .HasColumnType("int");

                    b.HasKey("HaveId", "TakesStudentId", "TakesCourseId");

                    b.HasIndex("TakesStudentId", "TakesCourseId");

                    b.ToTable("StudentStudentCourse");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Course", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Topic", null)
                        .WithMany("Courses")
                        .HasForeignKey("TopicId");

                    b.HasOne("EF_Core_Assignment_01.Models.CourseInstructor", null)
                        .WithMany("HaveCourses")
                        .HasForeignKey("CourseInstructorCourseId", "CourseInstructorInstractorId");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Instructor", "Manage")
                        .WithMany()
                        .HasForeignKey("ManageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manage");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Instructor", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.CourseInstructor", null)
                        .WithMany("HaveInstructors")
                        .HasForeignKey("CourseInstructorCourseId", "CourseInstructorInstractorId");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Student", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Department", null)
                        .WithMany("Students")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.StudentCourse", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Course", null)
                        .WithMany("studentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentStudentCourse", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("HaveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Assignment_01.Models.StudentCourse", null)
                        .WithMany()
                        .HasForeignKey("TakesStudentId", "TakesCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Course", b =>
                {
                    b.Navigation("studentCourses");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.CourseInstructor", b =>
                {
                    b.Navigation("HaveCourses");

                    b.Navigation("HaveInstructors");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Topic", b =>
                {
                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
