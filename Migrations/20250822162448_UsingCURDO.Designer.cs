// <auto-generated />
using System;
using EF_Core_Assignment_01.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Core_Assignment_01.Migrations
{
    [DbContext(typeof(ITIDbContext))]
    [Migration("20250822162448_UsingCURDO")]
    partial class UsingCURDO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.CourseInstructor", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("InstractorId")
                        .HasColumnType("int");

                    b.Property<int>("Evaluate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("CourseId", "InstractorId");

                    b.HasIndex("InstractorId");

                    b.ToTable("CourseInstructor");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Bouns")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("HourRate")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TakesId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.CourseInstructor", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Course", "HaveCourses")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Assignment_01.Models.Instructor", "HaveInstructors")
                        .WithMany()
                        .HasForeignKey("InstractorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HaveCourses");

                    b.Navigation("HaveInstructors");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Instructor", "Manage")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manage");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Student", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Department", "Department")
                        .WithOne("Students")
                        .HasForeignKey("EF_Core_Assignment_01.Models.Student", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.StudentCourse", b =>
                {
                    b.HasOne("EF_Core_Assignment_01.Models.Course", null)
                        .WithOne("studentCourses")
                        .HasForeignKey("EF_Core_Assignment_01.Models.StudentCourse", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Core_Assignment_01.Models.Student", "Have")
                        .WithOne("Takes")
                        .HasForeignKey("EF_Core_Assignment_01.Models.StudentCourse", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Have");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Course", b =>
                {
                    b.Navigation("studentCourses");
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Department", b =>
                {
                    b.Navigation("Students")
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Core_Assignment_01.Models.Student", b =>
                {
                    b.Navigation("Takes")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
